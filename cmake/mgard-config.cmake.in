include(CMakeFindDependencyMacro)

set(REQUIRED_VARS)

if(@ZLIB_FOUND@)
	find_dependency(ZLIB)
	list(APPEND REQUIRED_VARS ZLIB_FOUND)
endif()

if(@zstd_FOUND@)
  find_dependency(zstd)
	list(APPEND REQUIRED_VARS zstd_FOUND)
endif()

if(@NVCOMP_FOUND@)
	find_dependency(nvcomp)
	list(APPEND REQUIRED_VARS NVCOMP_FOUND)
endif()

if(@CUDAToolkit_FOUND@)
	find_dependency(CUDAToolkit)
	list(APPEND REQUIRED_VARS CUDAToolkit_FOUND)
endif()

if(@MOAB_FOUND@)
	find_dependency(MOAB)
	list(APPEND REQUIRED_VARS MOAB_FOUND)
endif()

if(@protobuf_FOUND@)
	find_package(PkgConfig REQUIRED)
	pkg_search_module(protobuf IMPORTED_TARGET GLOBAL REQUIRED protobuf>=3.0.0)
	list(APPEND REQUIRED_VARS protobuf_FOUND)
endif()

if(@OpenMP_FOUND@)
	find_dependency(OpenMP)
	list(APPEND REQUIRED_VARS OpenMP_FOUND)
endif()

include(FindPackageHandleStandardArgs)
set(${CMAKE_FIND_PACKAGE_NAME}_CONFIG ${CMAKE_CURRENT_LIST_FILE})
find_package_handle_standard_args(
	${CMAKE_FIND_PACKAGE_NAME}
	REQUIRED_VARS ${REQUIRED_VARS}
	CONFIG_MODE
)

if(NOT TARGET mgard::mgard)
  include("${CMAKE_CURRENT_LIST_DIR}/mgard-targets.cmake")
endif()

set(MGARD_LIBRARIES mgard::mgard)
set(MGARD_INCLUDE_DIRS
  $<TARGET_PROPERTY:mgard::mgard,INTERFACE_INCLUDE_DIRECTORIES>
)