import argparse
import os
import re
import typing

LINK_LABEL_DEFINITION: typing.Pattern[str] = re.compile(
'^'
' {0,3}'
'(?P<label>\[[^]]+\])'
':\s*'
'(?P<URL>\S+)'
'(\s+(?P<title>\'[^\']*\'|"[^"]*"|\([^)]*\)))?'
'$'
)

CMAKE_CURRENT_SOURCE_DIR: str = "${CMAKE_CURRENT_SOURCE_DIR}"
CMAKE_CURRENT_BINARY_DIR: str = "${CMAKE_CURRENT_BINARY_DIR}"
RELATIVE_BINARY_DIR: str = \
    os.path.relpath(CMAKE_CURRENT_BINARY_DIR, start=CMAKE_CURRENT_SOURCE_DIR)

#I do not guarantee that the following is perfectly accurate in its description
#of the behavior of GitHub and Doxygen. It should be helpful in explaining what
#this script is doing, though.

#Suppose a repository in the directory `repo/` contains two Markdown
#files, `repo/doc/a.md` and `repo/doc/b.md`, with the first linking to the
#second. In order for the link to work correctly on GitHub, its target must be
#the path to `repo/doc/b.md` relative to `repo/doc/`, the directory containing
#`repo/doc/a.md`. That is, the target must be `b.md`.

#Suppose we also want to include the Markdown files in the documentation
#generated by Doxygen. The Markdown files must (in general) be modified, and we
#will save the new versions in the CMake build directory. If the build
#directory is `repo/build` and we run `doxygen` in the root of the repository,
#then the target of the link from `a.md` to `b.md` must be the path to
#`repo/build/doc/b.md` relative to `repo/`, the working directory of `doxygen`.
#That is, the target must be `build/doc/b.md`.

#Separately, when linking to documented entities (files, in the case handled by
#this script), Doxygen needs the name of the entity to be preceded by '@ref'.
#See <https://www.doxygen.nl/manual/markdown.html#md_reflinks>.

parser = argparse.ArgumentParser(
    description='modify Markdown relative links for Doxygen'
)
parser.add_argument('infile')
parser.add_argument('outfile')
args = parser.parse_args()

assert args.infile.endswith('.md')
assert not os.path.isabs(args.infile)
infilehead: str = os.path.dirname(args.infile)

assert args.outfile.endswith('.md')
assert os.path.commonpath((CMAKE_CURRENT_BINARY_DIR, args.outfile)) == \
    CMAKE_CURRENT_BINARY_DIR

assert os.path.samefile(os.getcwd(), CMAKE_CURRENT_SOURCE_DIR)
assert os.sep == '/'

os.makedirs(os.path.dirname(args.outfile), exist_ok=True)

with open(args.infile, 'r') as f, open(args.outfile, 'w') as g:
    line: str
    for line in f:
        match: typing.Optional[typing.Match[str]] = \
            LINK_LABEL_DEFINITION.fullmatch(line.rstrip('\n'))
        if match is not None:
            groups: typing.Dict[str, str] = match.groupdict(default='')
            URL: str = groups['URL']
            path: typing.Optional[str] = None
            #This has not been tested in the case that the filepath is not
            #given relative to the root of the repository.
            if URL.endswith('.hpp') and os.path.isfile(URL):
                path = ''.join(('@ref ', URL))
            elif URL.endswith('.md'):
                #This is the path of the original file (the file being linked
                #to, not `args.infile`) relative to the root of the repository.
                rootrelpath: str = os.path.join(infilehead, URL)
                if os.path.isfile(rootrelpath):
                    #This is the path of the modified file relative to the
                    #root of the repository.
                    path = os.path.join(RELATIVE_BINARY_DIR, rootrelpath)
            if path is not None:
                g.write(''.join(
                    (groups['label'], ': ', path, groups['title'], '\n')
                ))
                continue
        g.write(line)
